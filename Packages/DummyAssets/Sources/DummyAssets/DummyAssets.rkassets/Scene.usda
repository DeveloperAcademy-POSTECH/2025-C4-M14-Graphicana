#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (476.0.0.508.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["DirectionalLight", "EnvironmentMap", "OceanPlane", "SkySphere", "SkyBoxMaterial", "TtouchParent", "Ttouch_walk", "Ttouch_parent", "NewsPaper_2", "NewsPaper", "Item", "DummyMaterial"]
    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-0.71140635, 1.556634e-7, -5.782976e-8)
        }
    )
    {
        quatf xformOp:orient = (0.93740183, -0.3482496, 8.302918e-8, 0)
        float3 xformOp:translate = (0, 24.496136, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            float3 color = (0.9048901, 0.9454482, 1)
            token info:id = "RealityKit.DirectionalLight"

            def RealityKitStruct "Shadow"
            {
            }
        }
    }

    def "NewsPaper" (
        active = true
        customData = {
            float3 rotationEulerHint = (-2.9042923, 0.7079655, -0.035237744)
        }
        references = @Newspaper/NewsPapaer.usd@
    )
    {
        quatf xformOp:orient = (-0.11707966, 0.93053734, -0.057435095, -0.34218967)
        float3 xformOp:scale = (1.5, 1.5, 1.5)
        float3 xformOp:translate = (-67.219635, 0.32238805, -27.579752)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "NewsPaper"
        {
            def RealityKitComponent "VFXEmitter"
            {
                uniform token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    def RealityKitStruct "mainEmitter"
                    {
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }
        }
    }

    def Capsule "Item" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0.5235988, 0, 0)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/DummyMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (0.9659258, 0.25881904, 0, 0)
        float3 xformOp:translate = (-45.52171, 0.5, -19.271076)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Item/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Material "DummyMaterial"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/DummyMaterial/UsdPreviewSurface.outputs:surface>

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8365234, 0.7811884, 0.2966173) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:metallic = 0.5
            float inputs:roughness = 0.2
            token outputs:surface
        }
    }

    def "SkySphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @SkySphere.usdz@
    )
    {
        rel material:binding = </Root/SkyBoxMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
    }

    def Material "SkyBoxMaterial"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/SkyBoxMaterial/UsdPreviewSurface.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.46264648, 0.6430664, 0.7216797) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:emissiveColor = (1, 1, 1) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:surface
        }
    }

    def "TtouchParent" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @Character/TtouchParent.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-70.364426, 0.19655618, -29.27386)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ttouch"
        {
            quatf xformOp:orient = (0.7058013, 0.70580125, 0.04294868, 0.04294868)
            float3 xformOp:scale = (0.1, 0.1, 0.1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Cube_027"
            {
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def "OceanPlane" (
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @EnvironmentMapV3/OceanPlane.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "EnvironmentMap" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @EnvironmentMapV3/EnvironmentMap.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Ttouch_walk" (
        active = false
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        references = @TtouchV3/Ttouch_walk.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-70, 0.3, -29)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Ttouch" (
        active = true
        prepend references = @TtouchV3/Ttouch.usd@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-69.30744, 0.29999995, -28.799633)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ttouch_root"
        {
            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "Ttouch_walk"
                {
                    uniform asset file = @TtouchV3/Ttouch_walk.usd@
                    uniform string name = "Ttouch_walk"
                }

                def RealityKitAnimationFile "Ttouch_idle"
                {
                    uniform asset file = @TtouchV3/Ttouch_idle.usd@
                    uniform string name = "Ttouch_idle"
                }
            }
        }
    }
}

