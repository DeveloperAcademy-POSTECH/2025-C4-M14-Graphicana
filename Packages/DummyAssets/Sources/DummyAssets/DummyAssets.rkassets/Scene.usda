#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (476.0.0.508.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["DirectionalLight", "EnvironmentMap", "Backpack", "Bottle", "Cheese", "Flashlight", "MapCompass", "EmissiveMaterial", "EmissiveNewspaper", "EmissiveMap", "OceanPlane", "SkySphere", "SkyBoxMaterial", "TtouchParent", "Ttouch_walk", "Ttouch", "NewsPaper", "Item", "DummyMaterial"]
    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-0.71140635, 1.556634e-7, -5.782976e-8)
        }
    )
    {
        quatf xformOp:orient = (0.93740183, -0.3482496, 8.302918e-8, 0)
        float3 xformOp:translate = (0, 24.496136, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            float3 color = (0.9048901, 0.9454482, 1)
            token info:id = "RealityKit.DirectionalLight"

            def RealityKitStruct "Shadow"
            {
                bool isEnabled = 1
            }
        }
    }

    def "NewsPaper" (
        active = true
        customData = {
            float3 rotationEulerHint = (-2.9042923, 0.7079655, -0.035237744)
        }
        references = @Newspaper/NewsPapaer.usd@
    )
    {
        quatf xformOp:orient = (-0.11707966, 0.93053734, -0.057435095, -0.34218967)
        float3 xformOp:scale = (1.5, 1.5, 1.5)
        float3 xformOp:translate = (-67.219635, 0.6, -27.579752)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "NewsPaper"
        {
            def RealityKitComponent "VFXEmitter"
            {
                uniform token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    def RealityKitStruct "mainEmitter"
                    {
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }

            over "Plane" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/EmissiveNewspaper> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }

    def Material "DummyMaterial"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/DummyMaterial/UsdPreviewSurface.outputs:surface>

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8365234, 0.7811884, 0.2966173) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:metallic = 0.5
            float inputs:roughness = 0.2
            token outputs:surface
        }
    }

    def "SkySphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @SkySphere.usdz@
    )
    {
        rel material:binding = </Root/SkyBoxMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
    }

    def Material "SkyBoxMaterial"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/SkyBoxMaterial/UsdPreviewSurface.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.46264648, 0.6430664, 0.7216797) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:emissiveColor = (1, 1, 1) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:surface
        }
    }

    def "TtouchParent" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @Character/TtouchParent.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-70.364426, 0.3, -29.27386)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ttouch"
        {
            quatf xformOp:orient = (0.7058013, 0.70580125, 0.04294868, 0.04294868)
            float3 xformOp:scale = (0.1, 0.1, 0.1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Cube_027"
            {
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def "OceanPlane" (
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @EnvironmentMapV3/OceanPlane.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Ttouch_walk" (
        active = false
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        references = @TtouchV3/Ttouch_walk.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-70, 0.3, -29)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Ttouch" (
        references = @TtouchV3/Ttouch.usd@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-69.30744, 0.37, -28.799633)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ttouch_root"
        {
            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "Ttouch_walk"
                {
                    uniform asset file = @TtouchV3/Ttouch_walk.usd@
                    uniform string name = "Ttouch_walk"
                }

                def RealityKitAnimationFile "Ttouch_idle"
                {
                    uniform asset file = @TtouchV3/Ttouch_idle.usd@
                    uniform string name = "Ttouch_idle"
                }
            }
        }
    }

    def "EnvironmentMap" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @EnvironmentMapV3/EnvironmentMap.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, -0.3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Backpack" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.570796, 2.1936502, 2.3841858e-7)
        }
        references = @Items/Backpack.usd@
    )
    {
        quatf xformOp:orient = (0.32273993, -0.3227399, 0.62915736, 0.62915736)
        float3 xformOp:scale = (0.50000006, 0.50000006, 0.50000006)
        float3 xformOp:translate = (-67.95084, 0.6, -25.019018)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Backpack"
        {
            over "Cube" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/EmissiveMaterial> (
                    bindMaterialAs = "strongerThanDescendants"
                )
            }
        }
    }

    def "Bottle" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.0471975, 0, 0)
        }
        references = @Items/Bottle.usd@
    )
    {
        quatf xformOp:orient = (0.8660254, -0.49999997, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-59.716408, 0.6003629, -27.349688)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Bottle"
        {
            over "Cylinder" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/EmissiveMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }

    def "Cheese" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @Items/Cheese.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (0.5, 0.5, 0.5)
        float3 xformOp:translate = (-63.207767, 0.3000002, -26.076021)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Circle"
        {
            over "Circle" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/EmissiveMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:translate = (0, -0.00009536744, 0.07404251)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def "Flashlight" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @Items/Flashlight.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (0.7, 0.7, 0.7)
        float3 xformOp:translate = (-70.312775, 0.49999985, -26.90945)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "FlashLight"
        {
            over "Cylinder_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/EmissiveMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }

    def "MapCompass" (
        active = true
        customData = {
            float3 rotationEulerHint = (1.570796, -0.6930334, -3.1415923)
        }
        references = @Items/MapCompass.usd@
    )
    {
        quatf xformOp:orient = (-0.24015021, 0.24015011, 0.66507727, 0.6650774)
        float3 xformOp:scale = (0.19999996, 0.19999994, 0.19999993)
        float3 xformOp:translate = (-60.078693, 0.54014134, -25.4429)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "MapandCompass"
        {
            over "Mesh_004" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/MapCompass/_materials/Map> (
                    bindMaterialAs = "weakerThanDescendants"
                )

                over "Map" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/EmissiveMap> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Compass" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/EmissiveMaterial> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }
    }

    def Material "EmissiveMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/EmissiveMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (295.90976, 107.18535)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 349

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/EmissiveMaterial/Mix.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (69.368706, 42.220215)
            int ui:nodegraph:node:stackingOrder = 445
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-663.06934, 16.68396)
            int ui:nodegraph:node:stackingOrder = 588
        }

        def Shader "WorleyNoise3D"
        {
            uniform token info:id = "ND_worleynoise3d_float"
            float inputs:jitter
            float3 inputs:position.connect = </Root/EmissiveMaterial/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-395.79898, -37.23713)
            int ui:nodegraph:node:stackingOrder = 586
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-838.69684, -81.98379)
            int ui:nodegraph:node:stackingOrder = 590
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-863.0906, -26.864492)
            int ui:nodegraph:node:stackingOrder = 591
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveMaterial/Position.outputs:out>
            float inputs:in2.connect = </Root/EmissiveMaterial/ConstantFloat.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-690.38367, -40.90969)
            int ui:nodegraph:node:stackingOrder = 589
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveMaterial/Multiply_2.outputs:out>
            float inputs:in2.connect = </Root/EmissiveMaterial/Time.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-531.8637, -31.653145)
            int ui:nodegraph:node:stackingOrder = 587
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_color3"
            float inputs:in.connect = </Root/EmissiveMaterial/WorleyNoise3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-211.0086, -0.31381586)
            int ui:nodegraph:node:stackingOrder = 585
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @Items/textures/Texture_01.png@
            string inputs:filtertype
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-547.98157, 324.4609)
            int ui:nodegraph:node:stackingOrder = 493
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/EmissiveMaterial/Image.outputs:out>
            color3f inputs:fg.connect = </Root/EmissiveMaterial/Convert.outputs:out>
            float inputs:mix = 0.5
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-180.9125, 149.24414)
            int ui:nodegraph:node:stackingOrder = 584
        }
    }

    def Material "EmissiveNewspaper"
    {
        token outputs:mtlx:surface.connect = </Root/EmissiveNewspaper/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (-280.5904, 119.488556)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (295.90976, 107.18535)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 349

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/EmissiveNewspaper/Mix.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (69.368706, 42.220215)
            int ui:nodegraph:node:stackingOrder = 445
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-663.06934, 16.68396)
            int ui:nodegraph:node:stackingOrder = 240
        }

        def Shader "WorleyNoise3D"
        {
            uniform token info:id = "ND_worleynoise3d_float"
            float inputs:jitter
            float3 inputs:position.connect = </Root/EmissiveNewspaper/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-395.79898, -37.23713)
            int ui:nodegraph:node:stackingOrder = 501
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-838.69684, -81.98379)
            int ui:nodegraph:node:stackingOrder = 248
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-863.0906, -26.864492)
            int ui:nodegraph:node:stackingOrder = 246
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveNewspaper/Position.outputs:out>
            float inputs:in2.connect = </Root/EmissiveNewspaper/ConstantFloat.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-690.38367, -40.90969)
            int ui:nodegraph:node:stackingOrder = 244
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveNewspaper/Multiply_2.outputs:out>
            float inputs:in2.connect = </Root/EmissiveNewspaper/Time.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-531.8637, -31.653145)
            int ui:nodegraph:node:stackingOrder = 238
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_color3"
            float inputs:in.connect = </Root/EmissiveNewspaper/WorleyNoise3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-211.0086, -0.31381586)
            int ui:nodegraph:node:stackingOrder = 498
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @Newspaper/textures/Newspaper.png@
            string inputs:filtertype
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-547.98157, 324.4609)
            int ui:nodegraph:node:stackingOrder = 503
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/EmissiveNewspaper/Image.outputs:out>
            color3f inputs:fg.connect = </Root/EmissiveNewspaper/Convert.outputs:out>
            float inputs:mix = 0.5
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-180.9125, 149.24414)
            int ui:nodegraph:node:stackingOrder = 499
        }
    }

    def Material "EmissiveMap"
    {
        token outputs:mtlx:surface.connect = </Root/EmissiveMap/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (-260.5904, 139.48856)
        int ui:nodegraph:node:stackingOrder = 2
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (295.90976, 107.18535)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 349

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/EmissiveMap/Mix.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (69.368706, 42.220215)
            int ui:nodegraph:node:stackingOrder = 445
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-663.06934, 16.68396)
            int ui:nodegraph:node:stackingOrder = 562
        }

        def Shader "WorleyNoise3D"
        {
            uniform token info:id = "ND_worleynoise3d_float"
            float inputs:jitter
            float3 inputs:position.connect = </Root/EmissiveMap/Add.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-395.79898, -37.23713)
            int ui:nodegraph:node:stackingOrder = 501
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-838.69684, -81.98379)
            int ui:nodegraph:node:stackingOrder = 562
        }

        def Shader "ConstantFloat"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0
            float outputs:out
            float2 ui:nodegraph:node:pos = (-863.0906, -26.864492)
            int ui:nodegraph:node:stackingOrder = 562
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveMap/Position.outputs:out>
            float inputs:in2.connect = </Root/EmissiveMap/ConstantFloat.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-690.38367, -40.90969)
            int ui:nodegraph:node:stackingOrder = 562
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector3FA"
            float3 inputs:in1.connect = </Root/EmissiveMap/Multiply_2.outputs:out>
            float inputs:in2.connect = </Root/EmissiveMap/Time.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-531.8637, -31.653145)
            int ui:nodegraph:node:stackingOrder = 238
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_color3"
            float inputs:in.connect = </Root/EmissiveMap/WorleyNoise3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-211.0086, -0.31381586)
            int ui:nodegraph:node:stackingOrder = 498
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @Items/textures/Map.png@
            string inputs:filtertype
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-547.98157, 324.4609)
            int ui:nodegraph:node:stackingOrder = 564
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/EmissiveMap/Image.outputs:out>
            color3f inputs:fg.connect = </Root/EmissiveMap/Convert.outputs:out>
            float inputs:mix = 0.5
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-180.9125, 149.24414)
            int ui:nodegraph:node:stackingOrder = 499
        }
    }
}

